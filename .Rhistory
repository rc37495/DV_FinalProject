setwd("~/DataVisualization/DV_FinalProject/01 Data")
setwd("~/DataVisualization/DV_FinalProject/01 Data")
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("~/DataVisualization/DV_FinalProject/01 Data")
file_path <- "DataGov_GDX_FY08_State_County.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("Veteran_Population", "Total_Expenditure", "Compensation_Pensions", "Construction", "Education_Vocational_Rehabilitation_Employment", "Loan_Guaranty" , "General_Operating_Expenses", "Insurance_Indemnities", "Medical_Care", "Unique_Patients")
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
library("dplyr", lib.loc="~/R/win-library/3.2")
setwd("~/DataVisualization/DV_FinalProject/01 Data")
file_path <- "DataGov_GDX_FY08_State_County.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
rename(df,c("Education_Vocational_Rehabilitation_Employment"="Edu_Voc_Rehab_Emp"))
rename(df,"Education_Vocational_Rehabilitation_Employment"="Edu_Voc_Rehab_Emp")
rename(df,Education_Vocational_Rehabilitation_Employment="Edu_Voc_Rehab_Emp")
rename(df,Education_Vocational_Rehabilitation_Employment=Edu_Voc_Rehab_Emp)
View(df)
rename(df,Edu_Voc_Rehab_Emp=Education_Vocational_Rehabilitation_Employment)
View(df)
rename(df,Edu_Voc_Rehab_Emp=Education_Vocational_Rehabilitation_Employment)
rename(Edu_Voc_Rehab_Emp=Education_Vocational_Rehabilitation_Employment)
df %>% rename(Edu_Voc_Rehab_Emp=Education_Vocational_Rehabilitation_Employment)
View(df)
str(df)
df %>% rename("Edu_Voc_Rehab_Emp" = "Education_Vocational_Rehabilitation_Employment")
rename(df,Edu_Voc_Rehab_Emp = Education_Vocational_Rehabilitation_Employment)
View(df)
setNames(df,"Education_Vocational_Rehabilitation_Employment","Edu_Voc_Rehab_Emp")
setNames(df,"Education_Vocational_Rehabilitation_Employment","Edu_Voc_Rehab_Emp")
setNames(df,"Education_Vocational_Rehabilitation_Employment","Edu_Voc_Rehab_Emp")
rename(df,c("Education_Vocational_Rehabilitation_Employment"="Edu_Voc_Rehab_Emp"))
setwd("~/DataVisualization/DV_FinalProject/01 Data")
file_path <- "DataGov_GDX_FY08_State_County.csv"
file_path <- "DataGov_GDX_FY08_State_County.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
df <- rename(df,Edu_Voc_Rehab_Emp=Education_Vocational_Rehabilitation_Employment)
View(df)
measures <- c("Veteran_Population", "Total_Expenditure", "Compensation_Pensions", "Construction", "Edu_Voc_Rehab_Emp", "Loan_Guaranty" , "General_Operating_Expenses", "Insurance_Indemnities", "Medical_Care", "Unique_Patients")
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
setwd("~/DataVisualization/DV_FinalProject/01 Data")
file_path <- "DataGov_GDX_FY09_State_and_County.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
names(df)
df <- rename(df,Edu_Voc_Rehab_Emp=Education_Vocational_Rehabilitation_Employment)
measures <- c("Veteran_Population", "Total_Expenditure", "Compensation_Pensions", "Construction", "Edu_Voc_Rehab_Emp", "Loan_Guaranty" , "General_Operating_Expenses", "Insurance_Indemnities", "Medical_Care", "Unique_Patients")
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("Veteran_Population", "Total_Expenditure", "Compensation_Pensions", "Construction", "Edu_Voc_Rehab_Emp", "Loan_Guaranty" , "General_Operating_Expenses", "Insurance_Indemnities", "Medical_Care", "Unique_Patients")
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
View(df)
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from DataGov_GDX_FY09"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_rc37495', PASS='orcl_rc37495', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
require(jsonlite)
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from DataGov_GDX_FY09"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_rc37495', PASS='orcl_rc37495', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
library("ggplot2", lib.loc="~/R/win-library/3.2")
library("RCurl", lib.loc="~/R/win-library/3.2")
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from DataGov_GDX_FY09"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_rc37495', PASS='orcl_rc37495', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df09 <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from DataGov_GDX_FY09"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_rc37495', PASS='orcl_rc37495', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df08 <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from DataGov_GDX_FY08"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_rc37495', PASS='orcl_rc37495', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df09 <- df09 %>% mutate(Year = 2009)
df08 <- df08 %>% mutate(Year = 2008)
View(df08)
bind_rows(df08, df09)
str(df09)
bind_rows(df09, df08)
bind_rows(df09, df08)
df09$FIPS <- NULL
View(df09)
df09 <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from DataGov_GDX_FY09"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_rc37495', PASS='orcl_rc37495', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View(df09)
View(df08)
View(df09)
df09$FIPS <- NULL
View(df09)
bind_rows(df09, df08)
setwd("~/DataVisualization/DV_FinalProject/01 Data")
file_path <- "DataGov_GDX_FY09_State_and_County.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
df <- rename(df,Edu_Voc_Rehab_Emp=Education_Vocational_Rehabilitation_Employment)
View(df)
measures <- c("Veteran_Population", "Total_Expenditure", "Compensation_Pensions", "Construction", "Edu_Voc_Rehab_Emp", "Loan_Guaranty" , "General_Operating_Expenses", "Insurance_Indemnities", "Medical_Care", "Unique_Patients")
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
names(df)
names(df08)
view(df)
View(Df)
View(df)
setwd("~/DataVisualization/DV_FinalProject/01 Data")
file_path <- "DataGov_GDX_FY09_State_and_County.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
df <- rename(df,Edu_Voc_Rehab_Emp=Education_Vocational_Rehabilitation_Employment)
# str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("Veteran_Population", "Total_Expenditure", "Compensation_Pension", "Construction", "Edu_Voc_Rehab_Emp", "Loan_Guaranty" , "General_Operating_Expenses", "Insurance_Indemnities", "Medical_Care", "Unique_Patients")
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
df09 <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from DataGov_GDX_FY9"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_rc37495', PASS='orcl_rc37495', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df09
View(df09)
View(df09)
names(df08)
df08 <- rename(COMPENSATION_PENSION = COMPENSATION_PENSIONS)
df08 <- rename(df08,COMPENSATION_PENSION = COMPENSATION_PENSIONS)
View(df08)
df09 <- df09 %>% mutate(Year = 2009)
require(jsonlite)
require(RCurl)
df09 <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from DataGov_GDX_FY9"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_rc37495', PASS='orcl_rc37495', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df08 <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from DataGov_GDX_FY08"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_rc37495', PASS='orcl_rc37495', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df09 <- df09 %>% mutate(Year = 2009)
df08 <- df08 %>% mutate(Year = 2008)
df08 <- rename(df08,COMPENSATION_PENSION = COMPENSATION_PENSIONS)
df09$FIPS <- NULL
bind_rows(df09, df08)
View(df08)
View(df09)
View(df09)
View(df08)
df08$VETERAN_POPULATION <- as.numeric(as.character(df08$VETERAN_POPULATION))
bind_rows(df09, df08)
df09$VETERAN_POPULATION <- as.numeric(as.character(df09$VETERAN_POPULATION))
bind_rows(df09, df08)
df09$UNIQUE_PATIENTS <- as.numeric(as.character(df09$UNIQUE_PATIENTS))
bind_rows(df09, df08)
View(df09)
dfnew <- bind_rows(df09, df08)
View(dfnew)
dfnew %>% ggplot(aes(x = STATE, y = MEDICAL_CARE)) %>% geom_bar
dfnew %>% ggplot(aes(x = STATE, y = MEDICAL_CARE)) %>% geom_bar()
dfnew %>% ggplot(aes(x = STATE, y = MEDICAL_CARE)) %>% geom_bar(stat = "bin")
dfnew %>% ggplot(aes(x = STATE, y = MEDICAL_CARE)) %>% geom_bar()
View(dfnew)
dfnew %>% ggplot(aes(x = STATE, y = MEDICAL_CARE)) %>% geom_bar()
dfnew %>% ggplot(aes(x = STATE, y = MEDICAL_CARE))
dfnew %>% ggplot(aes(x = "STATE", y = "MEDICAL_CARE")) %>% geom_bar()
dfnew %>% ggplot(aes(x = STATE, y = MEDICAL_CARE)) %>% geom_line()
dfnew %>% ggplot(aes(x = STATE, y = MEDICAL_CARE)) + geom_line()
dfnew %>% facet_wrap(~STATE) %>% ggplot(aes(x = STATE, y = MEDICAL_CARE)) + geom_bar()
dfnew %>% facet_wrap(~STATE) %>% ggplot(aes(x = COUNTY, y = MEDICAL_CARE)) + geom_bar()
dfnew %>% ggplot(aes(x = COUNTY, y = MEDICAL_CARE)) + geom_bar() + facet_wrap(~STATE)
